option(NCINE_LOG "Enable runtime logging" ON)
option(NCINE_DOWNLOAD_DEPENDENCIES "Download all build dependencies" ON)
option(NCINE_LINKTIME_OPTIMIZATION "Compile the game with link time optimization when in release" OFF)
option(NCINE_AUTOVECTORIZATION_REPORT "Enable report generation from compiler auto-vectorization" OFF)
#option(NCINE_DYNAMIC_LIBRARY "Compile the engine as a dynamic library" ON)
#option(NCINE_BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" OFF)
#option(NCINE_IMPLEMENTATION_DOCUMENTATION "Include implementation classes in the documentation" OFF)
option(NCINE_EMBED_SHADERS "Export shader files to C strings to be included in engine sources" ON)
option(NCINE_BUILD_ANDROID "Build Android version of the game" OFF)
option(NCINE_STRIP_BINARIES "Enable symbols stripping from libraries and executables when in release" OFF)
option(NCINE_VERSION_FROM_GIT "Try to set current game version from GIT repository" ON)

set(NCINE_PREFERRED_BACKEND "GLFW" CACHE STRING "Specify preferred backend on desktop")
#set_property(CACHE NCINE_PREFERRED_BACKEND PROPERTY STRINGS "GLFW;SDL2;QT5")
set_property(CACHE NCINE_PREFERRED_BACKEND PROPERTY STRINGS "GLFW;SDL2")

if(EMSCRIPTEN)
	option(NCINE_WITH_THREADS "Enable Emscripten Pthreads support" OFF)
	set(NCINE_DYNAMIC_LIBRARY OFF)
else()
	option(NCINE_WITH_THREADS "Enable support for threads" ON)

	if(NCINE_BUILD_ANDROID)
		set(NCINE_NDK_ARCHITECTURES "arm64-v8a" CACHE STRING "Set NDK target architectures")
		option(NCINE_ASSEMBLE_APK "Assemble Android APK with Gradle" OFF)
		option(NCINE_UNIVERSAL_APK "Configure Gradle build script to assemble an universal APK for all ABIs" OFF)
		set(NDK_DIR "" CACHE PATH "Set path to Android NDK")
	elseif(MSVC)
		set(NCINE_ARCH_EXTENSIONS "" CACHE STRING "Specifies architecture for code generation (IA32, SSE, SSE2, AVX, AVX2, AVX512)")
		if(WINDOWS_PHONE OR WINDOWS_STORE)
			option(NCINE_WITH_ANGLE "Enable Google ANGLE libraries support" ON)
			set(NCINE_UWP_CERTIFICATE_THUMBPRINT "" CACHE STRING "Code-signing certificate thumbprint (Windows RT only)")
			set(NCINE_UWP_CERTIFICATE_PATH "" CACHE STRING "Code-signing certificate path (Windows RT only)")
			set(NCINE_UWP_CERTIFICATE_PASSWORD "" CACHE STRING "Code-signing certificate password (Windows RT only)")
		else()
			option(NCINE_WITH_ANGLE "Enable Google ANGLE libraries support" OFF)
			option(NCINE_INSTALL_SYSLIBS "Install required MSVC system libraries with CMake" OFF)
			option(NCINE_COPY_DEPENDENCIES "Copy all build dependencies to target directory" OFF)
		endif()
	elseif(UNIX AND NOT APPLE AND NOT ANDROID)
		option(NCINE_ASSEMBLE_DEB "Assemble DEB package of the game" OFF)
		option(NCINE_ASSEMBLE_RPM "Assemble RPM package of the game" OFF)
	endif()
endif()

if(NOT WIN32 AND NOT NCINE_ARM_PROCESSOR)
	option(NCINE_WITH_GLEW "Enable GLEW support" ON)
endif()
#option(NCINE_WITH_PNG "Enable PNG image file loading" OFF)
option(NCINE_WITH_WEBP "Enable WebP image file loading" OFF)
option(NCINE_WITH_AUDIO "Enable OpenAL support and thus sound" ON)
option(NCINE_WITH_VORBIS "Enable Ogg Vorbis audio file loading" OFF)
#option(NCINE_WITH_LUA "Enable Lua scripting integration" OFF)
#if(NCINE_WITH_LUA)
#	option(NCINE_WITH_SCRIPTING_API "Enable Lua scripting API" OFF)
#endif()
option(NCINE_WITH_ANGELSCRIPT "Enable AngelScript scripting support" OFF)

#option(NCINE_WITH_ALLOCATORS "Enable the custom memory allocators" OFF)
#option(NCINE_WITH_IMGUI "Enable the integration with Dear ImGui" OFF)
#option(NCINE_WITH_NUKLEAR "Enable the integration with Nuklear" OFF)
option(NCINE_WITH_TRACY "Enable integration with Tracy frame profiler" OFF)
option(NCINE_WITH_RENDERDOC "Enable integration with RenderDoc" OFF)

set(NCINE_DATA_DIR "${CMAKE_SOURCE_DIR}/Content" CACHE PATH "Set path to the game data directory")

#if(NCINE_WITH_ALLOCATORS)
#	option(NCINE_RECORD_ALLOCATIONS "Record a timestamp of every allocation and deallocation" OFF)
#	option(NCINE_OVERRIDE_NEW "Override global new and delete operators to use custom allocators" OFF)
#	option(NCINE_USE_FREELIST "Use free list custom allocator instead of malloc()/free()" OFF)
#	set(NCINE_FREELIST_BUFFER "33554432" CACHE STRING "Size in bytes of free list allocator buffer")
#endif()

if(NCINE_WITH_RENDERDOC)
	set(RENDERDOC_DIR "" CACHE PATH "Set path to RenderDoc directory")
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	option(NCINE_ADDRESS_SANITIZER "Enable AddressSanitizer memory error detector of GCC and Clang" OFF)
	option(NCINE_UNDEFINED_SANITIZER "Enable UndefinedBehaviorSanitizer detector of GCC and Clang" OFF)
	option(NCINE_CODE_COVERAGE "Enable gcov instrumentation for testing code coverage" OFF)
endif()
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	option(NCINE_GCC_HARDENING "Enable memory corruption mitigation methods of GCC" OFF)
endif()

#set(NCINE_WITH_FIXED_BATCH_SIZE "0" CACHE PATH "Set custom fixed batch size (unsafe)")

# JazzÂ² Resurrection options
option(SHAREWARE_DEMO_ONLY "Show only Shareware Demo episode" OFF)
