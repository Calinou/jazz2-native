name: 'Linux'

on:
  push:
    branches:
      - '*'
  pull_request:
    types: [ opened, synchronize ]
  workflow_dispatch:

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - BuildType: Release
          Platform: x64
          Backend: GLFW
          CC: gcc
          CXX: g++

        - BuildType: Release
          Platform: x64
          Backend: GLFW
          CC: clang
          CXX: clang++
          
        - BuildType: Release
          Platform: x64
          Backend: SDL2
          CC: gcc
          CXX: g++

        - BuildType: Release
          Platform: x64
          Backend: SDL2
          CC: clang
          CXX: clang++

    runs-on: 'ubuntu-latest'

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: 'Create Build Environment'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y cmake curl g++ libgl1-mesa-dev libopenmpt-dev rpm

    - name: 'Configure CMake'
      run: |
        export CC=${{ matrix.CC }}
        export CXX=${{ matrix.CXX }}
        
        cmake -B ./_build/ -D CMAKE_BUILD_TYPE=${{ matrix.BuildType }} -D NCINE_LINKTIME_OPTIMIZATION=ON -D NCINE_PREFERRED_BACKEND=${{ matrix.Backend }} -D NCINE_ASSEMBLE_DEB=ON -D NCINE_ASSEMBLE_RPM=ON -D NCINE_WITH_GLEW=OFF

    - name: 'Build'
      run: |
        make -j $(nproc) -C ./_build/

    - name: 'Create Package'
      run: |
        make package -C ./_build/
        mkdir ./_package/
        cp -f ./_build/jazz2 ./_package/jazz2
        cp -f ./_build/*.deb ./_package/jazz2.deb
        cp -f ./_build/*.rpm ./_package/jazz2.rpm
        cp -f -r ./Content/ ./_package/Content/
        
        case "${{ matrix.CC }}" in
          gcc ) artifactPath="Jazz2_Linux_${{ matrix.Platform }}_${{ matrix.Backend }}" ;;
          clang ) artifactPath="Jazz2_Linux_${{ matrix.Platform }}_${{ matrix.Backend }}_Clang" ;;
          * ) artifactPath="Jazz2_Linux_${{ matrix.Platform }}_${{ matrix.Backend }}_${{ matrix.CC }}" ;;
        esac
        echo "artifactPath=$artifactPath" >> $GITHUB_ENV
        
    - name: 'Upload Package'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.artifactPath }}
        path: ./_package/
        